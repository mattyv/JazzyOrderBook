name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        exclude:
          # Windows doesn't have gcc easily available
          - os: windows-latest
            compiler: gcc
        include:
          # Add MSVC for Windows
          - os: windows-latest
            compiler: msvc
            build_type: Debug
          - os: windows-latest
            compiler: msvc
            build_type: Release

    steps:
    - uses: actions/checkout@v4

    - name: Set up compiler (Linux)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.compiler }}" == "gcc" ]; then
          # Add GCC 14 PPA and install
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y gcc-14 g++-14
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" == "clang" ]; then
          # Add LLVM 18 repository and install
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" -y
          sudo apt-get update
          sudo apt-get install -y clang-18 clang++-18
          echo "CC=clang-18" >> $GITHUB_ENV
          echo "CXX=clang++-18" >> $GITHUB_ENV
        fi

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.3

    - name: Set up clang (Windows)
      if: runner.os == 'Windows' && matrix.compiler == 'clang'
      run: |
        echo "CC=clang" >> $env:GITHUB_ENV
        echo "CXX=clang++" >> $env:GITHUB_ENV

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      working-directory: build
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Configure CMake (Windows MSVC)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      working-directory: build
      run: |
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Configure CMake (Windows Clang)
      if: runner.os == 'Windows' && matrix.compiler == 'clang'
      working-directory: build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      working-directory: build
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/compile_commands.json